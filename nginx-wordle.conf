## DO NOT EDIT HERE
## the file on server has been modified by Certbot and this won't work there
## NGINX Wordle config file
## to start nginx in separate container
# docker run -d --name nginx-base -p 81:80 nginx:latest
## copy config file into nginx container
# docker cp .\default.conf nginx-base:/etc/nginx/conf.d/
## reload nginx container to use new config
# docker exec nginx-base nginx -s reload
# or outside Docker: sudo systemctl restart nginx
# Reload: sudo systemctl reload nginx
# test config: nginx -t && nginx -s reload

## NOTE: proxy_pass http://localhost:9000 and http://127.0.0.1:9000 don't work

upstream stats {
    server mikespace.xyz:9000;
    # server 192.168.68.72:9000;
}
upstream wordcheck {
    server mikespace.xyz:9100;
    # server 192.168.68.72:9100;
}
upstream wordvalidation {
    server mikespace.xyz:9200;
    # server 192.168.68.72:9200;
}
upstream play {
    server mikespace.xyz:9300;
    # server 192.168.68.72:9300;
}
upstream orc {
    server mikespace.xyz:9400;
    # server 192.168.68.72:9400;
}

limit_req_zone $binary_remote_addr zone=mylimit:10m rate=1r/s;

# stats
server {
    server_name  stats.api.mikespace.xyz;

    location / {
        limit_req zone=mylimit burst=10 nodelay;
        
        proxy_pass http://stats/;
    }

    listen [::]:443 ssl; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/mikespace.xyz/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/mikespace.xyz/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}
server {
    server_name  wordcheck.api.mikespace.xyz;

    location / {
        limit_req zone=mylimit burst=10 nodelay;
        
        proxy_pass http://wordcheck/;
    }

    listen [::]:443 ssl; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/mikespace.xyz/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/mikespace.xyz/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}
server {
    server_name  wordvalidation.api.mikespace.xyz;

    location / {
        limit_req zone=mylimit burst=10 nodelay;
        
        proxy_pass http://wordvalidation/;
    }

    listen [::]:443 ssl; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/mikespace.xyz/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/mikespace.xyz/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}
server {
    server_name  play.api.mikespace.xyz;

    location / {
        limit_req zone=mylimit burst=10 nodelay;
        
        proxy_pass http://play/;
    }

    listen [::]:443 ssl; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/mikespace.xyz/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/mikespace.xyz/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}
server {
    server_name  orchestrator.api.mikespace.xyz;

    location / {
        limit_req zone=mylimit burst=10 nodelay;
        
        proxy_pass http://orc/;
    }

    listen [::]:443 ssl; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/mikespace.xyz/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/mikespace.xyz/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}

# original server
server {
    server_name  mikespace.xyz;

    # access_log  /var/log/nginx/host.access.log  main;

    location / {
        limit_req zone=mylimit burst=10 nodelay;
        
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
    # stats
    location /stats/ {
        proxy_pass http://stats/;
        # proxy_pass http://192.168.68.72:9000/;
    }
    # wordcheck
    location /wordcheck/ {
        proxy_pass http://wordcheck/;
    }
    # wordvalidation
    location /wordvalidation/ {
        proxy_pass http://wordvalidation/;
    }
    # play
    location /play/ {
        proxy_pass http://play/;
    }
    # orchestrator
    location /orc/ {
        proxy_pass http://orc/;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}

    listen [::]:443 ssl ipv6only=on; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/mikespace.xyz/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/mikespace.xyz/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}


server {
    if ($host = mikespace.xyz) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    listen       80;
    listen  [::]:80;
    server_name  mikespace.xyz;
    return 404; # managed by Certbot


}
server {
    if ($host = orchestrator.api.mikespace.xyz) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    listen       80;
    listen  [::]:80;
    server_name  orchestrator.api.mikespace.xyz;
    return 404; # managed by Certbot


}
server {
    if ($host = play.api.mikespace.xyz) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    listen       80;
    listen  [::]:80;
    server_name  play.api.mikespace.xyz;
    return 404; # managed by Certbot


}
server {
    if ($host = stats.api.mikespace.xyz) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    listen       80;
    listen  [::]:80;
    server_name  stats.api.mikespace.xyz;
    return 404; # managed by Certbot


}
server {
    if ($host = wordcheck.api.mikespace.xyz) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    listen       80;
    listen  [::]:80;
    server_name  wordcheck.api.mikespace.xyz;
    return 404; # managed by Certbot


}
server {
    if ($host = wordvalidation.api.mikespace.xyz) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    listen       80;
    listen  [::]:80;
    server_name  wordvalidation.api.mikespace.xyz;
    return 404; # managed by Certbot


}