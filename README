WordList.db 
    - all the 5 letter words in the dictionary
stats.db - 
    tables: 
        users (id, username) 
        games(user_id, game_id, finished, guesses, won) 
    views: streaks, wins
users.db - 
    tables: users(guid, user_id, username)
Answers.db:
    tables: 
        Answers(word_id, gameword)
        Games(game_id, word_id)
game1.db:
    tables:
        tables:
            games(guid, user_id, game_id, finished, guesses, won)
            streaks(user_id, streak, beginning, ending)
            wins(user_id, count(won))

 

Project 5:

How to start the application:
- Install all dependencies, some of the required modules are, but there could be others:
    - python redis module: python3 -m pip install redis
    - python httpx module: python3 -m pip install httpx
    - pip: sudo apt install python3-pip
    - uvicorn: pip install uvicorn
    - fastapi: pip install fastapi
    - (other modules)
- Download traefik to the application's root folder

- Once all dependencies are installed, initialize the databases
    - open Terminal in the application's root folder: bin/init.sh

- Start the application server:
    - in Terminal: 
        - foreman start -m 'stats=3,check=1,validate=1,play=1,orchestrator=1,traefik=1' 

- Add a cronjob to update Redis every 10 minutes:
    - run: crontab -e
    - Enter: '*/10 * * * *  /usr/bin/python3 /{path to project folder}/bin/TopTen.py >> /{Path to project folder}/cron.log 2>&1'
    - Save and quit editor



Project 4:

NOTE: the .sql files are not used but kept for learning purposes

Install Redis if you haven't done it, the Play service requires it

Initialize the databases: (adjust num of stats and users in stats.py for speed)
- run: bin/init.sh
- What previous line did:
    Initialize the Answers.db and WordList.db databases:
        - WordList.db contains the valid five-letter words
        - Answers.db contains the answers and their word_id


    Initialize stats.db database:
    - create a database with 1 million stats and 100k users
    - run: python3 bin/stats.py
    - NOTE: this will create a ./var/stats.db file which the program uses, 
        if you have a ./var/sqlite3-populated.db file, please change it to ./var/stats.db
        The program won't work without ./var/stats.db
    Shard the database into 1 users and 3 games shards with uuid as PRIMARY KEY:
    - run: python3 bin/shard.py


Install traefik in the root folder of project
Run the Procfile with services and start traefik reverse proxy/load balancing:
- run: foreman start -m 'stats=3,check=1,validate=1,play=1,traefik=1'


Add a cronjob to update Redis every 10 minutes:
- run: crontab -e
- Enter: '*/10 * * * *  /usr/bin/python3 /{path to project folder}/bin/TopTen.py >> /{Path to project folder}/cron.log 2>&1'
- Save and quit editor



Project 3 team members:

NOTE: the .sql files are not used but kept for learning purposes

- run:  bin/init.sh

Initialize the Answers.db and WordList.db databases:
    - WordList.db contains the valid five-letter words
    - Answers.db contains the answers and their word_id

Install traefik in the root folder of project

Initialize stats.db database:
- create a database with 1 million stats and 100k users
- run: python3 bin/stats.py
- NOTE: this will create a ./var/stats.db file which the program uses, 
    if you have a ./var/sqlite3-populated.db file, please change it to ./var/stats.db
    The program won't work without ./var/stats.db
Shard the database into 1 users and 3 games shards with uuid as PRIMARY KEY:
- run: python3 bin/shard.py


Start traefik reverse proxy/load balancing:
- run: ./traefik --configFile=traefik.toml
Run the Procfile with 3 users stats service, 1 check and 1 validate service:
- run: foreman start -m 'stats=3,check=1,validate=1,play=1'

The services and their documentation are located at the following addresses:
- stats: localhost:9000/api/v1/
- check: localhost:9100/api/v1/
- validate: localhost:9200/api/v1/
- play: localhost:9300/api/v1/

Using the API
- The best way to see how the API works is with the automatic documentation provided by FastAPI
- Navigate to the microservice using the link provided by foreman in a browser
- add '/docs' after the link in browser 
- The available functions are listed along with the required parameters 
- You can enter some values to see what gets returned for each function

  
There are 2 microservices:
WordValidation
- Validate a word against a database of valid words
- Add a valid word to database
- Remove a word from database of valid words

WordCheck
- Check a word against the answer
- Change the answer of a game

Project 3:
New microservice added:
Stats
- Posts a win or loss for a particular game along with timestamp and number of guesses
- Retrieving the statistics for a user
- Retrieving top 10 users by number of wins
- Retrieving top 10 users by longest streak

