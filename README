Current state of the app:
- App is deployed on a Droplet at http://mikespace.xyz
- Things to fix: 
    - no HTTPS yet
    - User Stats: streaks not working for custom username
    - Stats and Leaderboard not refocusing

WordList.db 
    - all the 5 letter words in the dictionary
stats.db - 
    tables: 
        users (id, username) 
        games(user_id, game_id, finished, guesses, won) 
    views: streaks, wins
users.db - 
    tables: users(guid, user_id, username)
Answers.db:
    tables: 
        Answers(word_id, gameword)
        Games(game_id, word_id)
game1.db:
    tables:
        tables:
            games(guid, user_id, game_id, finished, guesses, won)
            streaks(user_id, streak, beginning, ending)
            wins(user_id, count(won))

 
Running on bare Linux:
How to start the application:
- Install all dependencies, some of the required modules are, but there could be others:
    - apt install python3-pip
    - venv: apt install python3.10-venv
- Create virtual environment and use it
    - python3 -m venv venv
    - chmod u+rwx venv/bin/activate
    - source venv/bin/activate
- Install python dependencies
    - pip install Faker
    - python redis module: pip install redis
    - Redis server: sudo apt install redis-server
    - Redis-cli: apt install redis-tools
    - python httpx module: pip install httpx
    - uvicorn: pip install uvicorn
    - fastapi: pip install fastapi
    - pydantic_settings: pip install pydantic-settings
    - sqlite3: apt install sqlite3
    - (other modules)
- Download traefik to the application's root folder
    - LINK: https://github.com/traefik/traefik/releases/download/v2.10.4/traefik_v2.10.4_linux_amd64.tar.gz
    - tar -xvzf traefik_v2.10.4_linux_amd64.tar.gz
- Install foreman
    - apt install ruby-rubygems
    - gem install foreman

- Once all dependencies are installed, initialize the databases
    - open Terminal in the application's root folder: bin/init.sh

- Start the application server:
    - in Terminal: 
        - foreman start -m 'stats=3,check=1,validate=1,play=1,orchestratorb=1,traefik=1' 

- Add a cronjob to update Redis every 10 minutes - needs patience because it quietly fails (doesn't print to the current terminal):
    - run: crontab -e
    - Enter: '*/10 * * * *  /usr/bin/python3 /{path to project folder}/bin/TopTen.py >> /{Path to project folder}/cron.log 2>&1'
    - NOTE: in DO Ubuntu Droplet, the 'Home' directory is /root, 
        so the full file path for this is /root/wordle/bin/TopTen.py
    - Also: chmod 744 bin/TopTen.py (has been added to Dockerfile for Orchestrator)
    - Save and quit editor

- Redis:
    - Security:
        - We must set password to use ACL because the port is open to WAN, anyone can access it
        - Also, protected mode protects from non-localhost users but we still have to set a password anyway or otherwise we'd lose access
        - See list of ACL users: ACL LIST
        - More commands: https://redis.io/commands/acl-setuser/
        - But the way to go is by using redis.conf file, (or an external ACL file)
            - https://redis.io/docs/management/config-file/
        - To use redis.conf in docker compose:
            - services > redis:
                - command: redis-server /etc/redis.conf
                - volumes:
                    - ./redis.conf:/etc/redis.conf
    - Data persistence: 
        - Data is wiped from memory between restarts, but redis periodically dumps data to a file, just give it a volume like:
            - ./var/redis:/data
        - But this way we can lose a couple minutes' worth of data in case of an outage. so use Append Only File in redis.conf:
            - appendonly yes


Deployment: 
- Install Docker
    - https://www.docker.com/products/docker
- Pull from git repo
    - git clone https://github.com/MichaelDang/wordle.git
    - cd wordle
    - git checkout docker
- Copy .env, redis.conf, and crontab.txt (using FileZilla)
- Build and copy frontend code (maybe download npm and just build it on server)
    - place the wordle-frontend/dist/ folder in /wordle/wordle-frontend/ (including dist/)

Deployment details:
Deploy backend using Docker: 
- Docker Volume NOTE: using named volume in docker compose means that the volume will be managed by Docker (it won't be in the local ./var directory, but will create new .db files in the virtual ./var directory, the local ones, if they have .db files will not reflect what happens in the app when it is running)
- Most of the above steps are done automatically using docker compose, except for 3 things:
    - Copying the .env file (was .gitignored so git clone doesn't work)
    - Copying the redis.conf file (also .gitignored)
    - Setting up crontab for TopTen leaderboard 
        - During dev: run: python bin/TopTen.py manually from one of the containers (usually Orchestrator)
- .env and redis.conf has passwords so they must be copied manually into root folder
- Setting up crontab (probably best done manualy since it's outside of docker)
    - create a venv: python3 -m venv venv
    - install dependencies: python3 -m pip install -r cron-requirements.txt
    - create a file to store cron-fragments.txt
    - view running cron jobs: crontab -l -e
    - put running cron jobs into crontab.txt
    - * * * * * /root/wordle/venv/bin/python /root/wordle/bin/TopTen.py >> /root/wordle/cron.log 2>&1
    - run: crontab crontab.txt

Deploy frontend (NGINX outside Docker): 
- Build the app on local machine: npm run build
- SFTP to the server using FileZilla and upload the dist/ content to /var/www/html
- The page should be viewable after a few seconds

Deploy frontend (NGINX in Docker):
- Build app on local machine: npm run build
- SFTP to server using FileZilla and upload the dist/ content to /wordle/wordle-frontend/dist 
- Start Docker compose

Ubuntu server (Digital Ocean Droplet):
- On local machine, create ssh key-pair, go to <user>/.ssh: ssh-keygen
- If you don't have access to server thru SSH, go to droplet's control panel and open Access>Droplet Console
- On server, find .ssh/ folder: ls -al
- Run: nano .ssh/authorized_keys
- Add the public key to the file
- Save and quit
- Make sure .ssh/ has 700 permissions and authorized_keys has 600 permissions
- Back to local machine, run: ssh -i <key file> <user>@<droplet IP>

FileZilla setup: 
- This will use the same SSH key that is used to SSH into server
- Edit>Settings...>SFTP: add SSH private key in 'Add key file'
- Save and quit
- File>New Site: enter IP or domain name, port 22
- Connect


Project 4:

NOTE: the .sql files are not used but kept for learning purposes

Install Redis if you haven't done it, the Play service requires it

Initialize the databases: (adjust num of stats and users in stats.py for speed)
- run: bin/init.sh
- What previous line did:
    Initialize the Answers.db and WordList.db databases:
        - WordList.db contains the valid five-letter words
        - Answers.db contains the answers and their word_id


    Initialize stats.db database:
    - create a database with 1 million stats and 100k users
    - run: python3 bin/stats.py
    - NOTE: this will create a ./var/stats.db file which the program uses, 
        if you have a ./var/sqlite3-populated.db file, please change it to ./var/stats.db
        The program won't work without ./var/stats.db
    Shard the database into 1 users and 3 games shards with uuid as PRIMARY KEY:
    - run: python3 bin/shard.py


Install traefik in the root folder of project
Run the Procfile with services and start traefik reverse proxy/load balancing:
- run: foreman start -m 'stats=3,check=1,validate=1,play=1,traefik=1'


Add a cronjob to update Redis every 10 minutes:
- run: crontab -e
- Enter: '*/10 * * * *  /usr/bin/python3 /{path to project folder}/bin/TopTen.py >> /{Path to project folder}/cron.log 2>&1'
- Save and quit editor



Project 3 team members:

NOTE: the .sql files are not used but kept for learning purposes

- run:  bin/init.sh

Initialize the Answers.db and WordList.db databases:
    - WordList.db contains the valid five-letter words
    - Answers.db contains the answers and their word_id

Install traefik in the root folder of project

Initialize stats.db database:
- create a database with 1 million stats and 100k users
- run: python3 bin/stats.py
- NOTE: this will create a ./var/stats.db file which the program uses, 
    if you have a ./var/sqlite3-populated.db file, please change it to ./var/stats.db
    The program won't work without ./var/stats.db
Shard the database into 1 users and 3 games shards with uuid as PRIMARY KEY:
- run: python3 bin/shard.py


Start traefik reverse proxy/load balancing:
- run: ./traefik --configFile=traefik.toml
Run the Procfile with 3 users stats service, 1 check and 1 validate service:
- run: foreman start -m 'stats=3,check=1,validate=1,play=1'

The services and their documentation are located at the following addresses:
- stats: localhost:9000/api/v1/
- check: localhost:9100/api/v1/
- validate: localhost:9200/api/v1/
- play: localhost:9300/api/v1/

Using the API
- The best way to see how the API works is with the automatic documentation provided by FastAPI
- Navigate to the microservice using the link provided by foreman in a browser
- add '/docs' after the link in browser 
- The available functions are listed along with the required parameters 
- You can enter some values to see what gets returned for each function

  
There are 2 microservices:
WordValidation
- Validate a word against a database of valid words
- Add a valid word to database
- Remove a word from database of valid words

WordCheck
- Check a word against the answer
- Change the answer of a game

Project 3:
New microservice added:
Stats
- Posts a win or loss for a particular game along with timestamp and number of guesses
- Retrieving the statistics for a user
- Retrieving top 10 users by number of wins
- Retrieving top 10 users by longest streak

